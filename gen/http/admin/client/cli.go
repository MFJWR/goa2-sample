// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// Admin HTTP client CLI support package
//
// Command:
// $ goa gen github.com/tonouchi510/goa2-sample/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	admin "github.com/tonouchi510/goa2-sample/gen/admin"
	goa "goa.design/goa"
)

// BuildAdminGetUserPayload builds the payload for the Admin admin get user
// endpoint from CLI flags.
func BuildAdminGetUserPayload(adminAdminGetUserID string) (*admin.GetUserPayload, error) {
	var id string
	{
		id = adminAdminGetUserID
	}
	payload := &admin.GetUserPayload{
		ID: id,
	}
	return payload, nil
}

// BuildAdminCreateUserPayload builds the payload for the Admin admin create
// user endpoint from CLI flags.
func BuildAdminCreateUserPayload(adminAdminCreateUserBody string) (*admin.CreateUserPayload, error) {
	var err error
	var body AdminCreateUserRequestBody
	{
		err = json.Unmarshal([]byte(adminAdminCreateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Mollitia consequuntur consequatur velit non.\",\n      \"id\": \"XRQ85mtXnINISH25zfM0m5RlC6L2\",\n      \"name\": \"Praesentium consequatur aperiam sint ut ea.\"\n   }'")
		}
		if utf8.RuneCountInString(body.ID) < 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", body.ID, utf8.RuneCountInString(body.ID), 28, true))
		}
		if utf8.RuneCountInString(body.ID) > 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", body.ID, utf8.RuneCountInString(body.ID), 28, false))
		}
		if err != nil {
			return nil, err
		}
	}
	if err != nil {
		return nil, err
	}
	v := &admin.CreateUserPayload{
		ID:    body.ID,
		Name:  body.Name,
		Email: body.Email,
	}
	return v, nil
}

// BuildAdminUpdateUserPayload builds the payload for the Admin admin update
// user endpoint from CLI flags.
func BuildAdminUpdateUserPayload(adminAdminUpdateUserBody string, adminAdminUpdateUserID string) (*admin.UpdateUserPayload, error) {
	var err error
	var body AdminUpdateUserRequestBody
	{
		err = json.Unmarshal([]byte(adminAdminUpdateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Praesentium tenetur.\",\n      \"name\": \"Id dicta voluptatem.\"\n   }'")
		}
	}
	var id string
	{
		id = adminAdminUpdateUserID
	}
	if err != nil {
		return nil, err
	}
	v := &admin.UpdateUserPayload{
		Name:  body.Name,
		Email: body.Email,
	}
	v.ID = id
	return v, nil
}

// BuildAdminDeleteUserPayload builds the payload for the Admin admin delete
// user endpoint from CLI flags.
func BuildAdminDeleteUserPayload(adminAdminDeleteUserID string) (*admin.DeleteUserPayload, error) {
	var id string
	{
		id = adminAdminDeleteUserID
	}
	payload := &admin.DeleteUserPayload{
		ID: id,
	}
	return payload, nil
}
