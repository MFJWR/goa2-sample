// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// Users HTTP client CLI support package
//
// Command:
// $ goa gen github.com/tonouchi510/goa2-sample/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	users "github.com/tonouchi510/goa2-sample/gen/users"
	goa "goa.design/goa"
)

// BuildGetUserPayload builds the payload for the Users get user endpoint from
// CLI flags.
func BuildGetUserPayload(usersGetUserID string) (*users.GetUserPayload, error) {
	var id string
	{
		id = usersGetUserID
	}
	payload := &users.GetUserPayload{
		ID: id,
	}
	return payload, nil
}

// BuildCreateUserPayload builds the payload for the Users create user endpoint
// from CLI flags.
func BuildCreateUserPayload(usersCreateUserBody string) (*users.CreateUserPayload, error) {
	var err error
	var body CreateUserRequestBody
	{
		err = json.Unmarshal([]byte(usersCreateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Id nulla adipisci qui nisi culpa.\",\n      \"id\": \"XRQ85mtXnINISH25zfM0m5RlC6L2\",\n      \"name\": \"Voluptatem rerum sed suscipit aut.\"\n   }'")
		}
		if utf8.RuneCountInString(body.ID) < 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", body.ID, utf8.RuneCountInString(body.ID), 28, true))
		}
		if utf8.RuneCountInString(body.ID) > 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", body.ID, utf8.RuneCountInString(body.ID), 28, false))
		}
		if err != nil {
			return nil, err
		}
	}
	if err != nil {
		return nil, err
	}
	v := &users.CreateUserPayload{
		ID:    body.ID,
		Name:  body.Name,
		Email: body.Email,
	}
	return v, nil
}

// BuildUpdateUserPayload builds the payload for the Users update user endpoint
// from CLI flags.
func BuildUpdateUserPayload(usersUpdateUserBody string, usersUpdateUserID string) (*users.UpdateUserPayload, error) {
	var err error
	var body UpdateUserRequestBody
	{
		err = json.Unmarshal([]byte(usersUpdateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Repellat minus id.\",\n      \"name\": \"Debitis harum non pariatur dolore possimus non.\"\n   }'")
		}
	}
	var id string
	{
		id = usersUpdateUserID
	}
	if err != nil {
		return nil, err
	}
	v := &users.UpdateUserPayload{
		Name:  body.Name,
		Email: body.Email,
	}
	v.ID = id
	return v, nil
}

// BuildDeleteUserPayload builds the payload for the Users delete user endpoint
// from CLI flags.
func BuildDeleteUserPayload(usersDeleteUserID string) (*users.DeleteUserPayload, error) {
	var id string
	{
		id = usersDeleteUserID
	}
	payload := &users.DeleteUserPayload{
		ID: id,
	}
	return payload, nil
}
